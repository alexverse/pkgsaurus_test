"use strict";(self.webpackChunkdocusaurus_website=self.webpackChunkdocusaurus_website||[]).push([[2558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?i.createElement(m,r(r({ref:t},u),{},{components:n})):i.createElement(m,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2,title:"App Structure"},r="Philosophy",p={unversionedId:"explanation/application-structure",id:"explanation/application-structure",title:"App Structure",description:"Shiny comes with a powerful [reactive",source:"@site/docs/explanation/application-structure.md",sourceDirName:"explanation",slug:"/explanation/application-structure",permalink:"/pkgsaurus_test/docs/explanation/application-structure",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"App Structure"},sidebar:"tutorialSidebar",previous:{title:"What is Rhino",permalink:"/pkgsaurus_test/docs/explanation/what-is-rhino"},next:{title:"Box Modules",permalink:"/pkgsaurus_test/docs/explanation/box-modules"}},l={},s=[{value:"Logic",id:"logic",level:2},{value:"View",id:"view",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"philosophy"},"Philosophy"),(0,a.kt)("p",null,"Shiny comes with a powerful ",(0,a.kt)("a",{parentName:"p",href:"https://shiny.rstudio.com/articles/reactivity-overview.html"},"reactive\nprogramming"),"\nmodel and a rich set of functions for creating UI widgets or custom\n",(0,a.kt)("a",{parentName:"p",href:"https://shiny.rstudio.com/articles/tag-glossary.html"},"HTML structure"),".\nThese features make it possible to quickly build impressive, interactive\napplications, but they can also make it harder to test and reuse your\ncode."),(0,a.kt)("p",null,"To address this issue, we recommend separating the code that depends on\nShiny from the logic which can be expressed without it. In our\nexperience, this division is crucial for building robust and\nmaintainable applications. To support this separation, Rhino encourages\na specific structure for the R sources of your application:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"main.R"),": The entry point to your application."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logic"),": Application code independent from Shiny."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"view"),": Shiny modules and related code.")),(0,a.kt)("h2",{id:"logic"},"Logic"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"logic")," directory for code which can be expressed without Shiny."),(0,a.kt)("p",null,"Every Shiny app may have a different end goal, but they all generally\ncontain isolatable sections of code that can expressed as a normal R\nfunctions. This could be data manipulation, generating non-interactive\nplots and graphs, or connecting to an external data source, but outside\nof definable inputs, it doesn\u2019t interact with or rely on Shiny in any\nway."),(0,a.kt)("p",null,"Code that relies upon reactivity or UI builder/markup functions can be\nproblematic to test and difficult to reuse. With proper design and\nunderstanding of this concept, it is possible to express most of your\napplication logic using plain R functions and data structures (like\nlists, data frames)."),(0,a.kt)("h2",{id:"view"},"View"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," directory should contain code which describes the user\ninterface of your application and relies upon the reactive capabilities\nof Shiny. Here is where we will use the functions defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"logic"),",\nand where the core app functionality will be defined."),(0,a.kt)("p",null,"If you are not familiar with ",(0,a.kt)("a",{parentName:"p",href:"https://shiny.rstudio.com/articles/modules.html"},"Shiny\nmodules"),", please take\nthe time to read up on the concept. In short, using modules we can\nisolate paired Shiny UI/Server code, and we prevent overlap of\nreactivity by wrapping all input/output value names with the ",(0,a.kt)("inlineCode",{parentName:"p"},"ns()"),"\nfunction. This allows us to \u201cnamespace\u201d the running module and use it\nmultiple times in the same application. This is a very important concept\nto shortly summarize, but if this is new to you just remember that if\nyou want to reference a UI element in the server, it needs to be\nnamespaced."),(0,a.kt)("p",null,"A typical module could be structured like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'box::use(\n  shiny[moduleServer, NS, renderText, tagList, textInput, textOutput],\n)\nbox::use(\n  app/logic/messages[hello_message],\n)\n\n#\' @export\nui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    textInput(ns("name"), "Name"),\n    textOutput(ns("message"))\n  )\n}\n\n#\' @export\nserver <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    output$message <- renderText(hello_message(input$name))\n  })\n}\n')),(0,a.kt)("h1",{id:"minimal-appr"},"Minimal ",(0,a.kt)("inlineCode",{parentName:"h1"},"app.R")),(0,a.kt)("p",null,"A Rhino application comes with a minimal ",(0,a.kt)("inlineCode",{parentName:"p"},"app.R"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Rhino / shinyApp entrypoint. Do not edit.\nrhino::app()\n")),(0,a.kt)("p",null,"It is important that you do not edit this file or use it like a\n",(0,a.kt)("inlineCode",{parentName:"p"},"global.R")," file, and instead write your top-level code in ",(0,a.kt)("inlineCode",{parentName:"p"},"app/main.R"),".\nIt is also important to note that thanks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"shinyApp")," string in the\ncomment, RStudio recognizes this file as a Shiny application and\ndisplays the \u201cRun\u201d and \u201cPublish\u201d buttons."),(0,a.kt)("p",null,"This approach gives Rhino full control over the startup processes of\nyour application. Steps performed by ",(0,a.kt)("inlineCode",{parentName:"p"},"rhino::app()")," include:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Purge box cache, so the app can be reloaded without restarting R\nsession."),(0,a.kt)("li",{parentName:"ol"},"Configure logger (log level, log file)."),(0,a.kt)("li",{parentName:"ol"},"Configure static files."),(0,a.kt)("li",{parentName:"ol"},"Load the main module / legacy entrypoint."),(0,a.kt)("li",{parentName:"ol"},"Add head tags (favicon, CSS & JS).")),(0,a.kt)("p",null,"It is a fair question to ask if we really need a separate ",(0,a.kt)("inlineCode",{parentName:"p"},"main.R")," file.\nCouldn\u2019t we just define the top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"ui")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"server")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"app.R")," and\npass it to ",(0,a.kt)("inlineCode",{parentName:"p"},"rhino::app()")," as arguments as we would with a normal\n",(0,a.kt)("inlineCode",{parentName:"p"},"shiny::shinyApp() call"),"?"),(0,a.kt)("p",null,"The reasoning behind this stucture is to enforce consistent use of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"{box}")," modules throughout the application. A file loaded with\n",(0,a.kt)("inlineCode",{parentName:"p"},"box::use()")," can only load other modules/packages with ",(0,a.kt)("inlineCode",{parentName:"p"},"box::use()"),". In\nshort, this means that we cannot use the ",(0,a.kt)("inlineCode",{parentName:"p"},"library()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"source()"),"\nfunctions in our app. This is an important distinction from traditional\nShiny structure, where we are simply sourcing ",(0,a.kt)("inlineCode",{parentName:"p"},"app.R")," when the app is\nloaded."),(0,a.kt)("p",null,"As the entire Rhino application is loaded with ",(0,a.kt)("inlineCode",{parentName:"p"},"box::use(app/main)"),", all\nits sources must be properly structured as box modules."))}c.isMDXComponent=!0}}]);